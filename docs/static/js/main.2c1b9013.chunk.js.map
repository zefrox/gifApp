{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","console","log","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,QADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAa9C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAhBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCJhB,SAASG,EAAT,GAAmC,IAAbC,EAAY,EAAZA,MAAMC,EAAM,EAANA,IACvC,OACI,qBAAKC,UAAU,gDAAf,SACI,qBAAKC,IAAKF,EAAKG,IAAKJ,M,2BCJnBK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACTN,EADS,iDACuCO,UAAUF,GADjD,+DAEIG,MAAMR,GAFV,cAETS,EAFS,gBAGQA,EAAKC,OAHb,uBAGPC,EAHO,EAGPA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAEzB,OADAC,QAAQC,IAAIF,GACL,CACHG,GAAIH,EAAIG,GACRlB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAII,cAAN,aAAE,EAAYC,iBAAiBnB,QAT3B,kBAYRY,GAZQ,4CAAH,sDCIPQ,EAAU,SAAC,GAAkB,IAAhBf,EAAe,EAAfA,SAAe,ECHb,SAACA,GAAc,IAAD,EACZpB,mBAAS,CAC/B0B,KAAM,GACNU,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KActC,OATAC,qBAAU,WACNpB,EAAQC,GAAUoB,MAAK,SAAAC,GACnBH,EAAS,CACLZ,KAAMe,EACNL,SAAS,SAGlB,CAAChB,IAEGiB,EDV2BK,CAAatB,GAAjCa,EADuB,EAC7BP,KAAcU,EADe,EACfA,QACtB,OACI,qCACI,mCAAMhB,KAELgB,GAAW,yCACZ,qBAAKpB,UAAU,YAAf,SAEQiB,EAAOL,KAAI,SAAAC,GAAG,OACV,cAAChB,EAAD,eAEQgB,GADCA,EAAIG,aEbxBW,EAAe,WAAO,IAAD,EACM3C,mBAAS,CAAC,cADhB,mBACvB4C,EADuB,KACX7C,EADW,KAE9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ6C,EAAWhB,KAAI,SAACR,EAAUyB,GAAX,OACX,cAAC,EAAD,CACIzB,SAAUA,GACLA,Y,MCXjC0B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2c1b9013.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('Hola')\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats])\n            setInputValue('');\n        }\n\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","import React from 'react'\n\nexport default function GifGridItem({title,url}) {\n    return (\n        <div className=\"card animate__animated animate__bounceInRight\">\n            <img src={url} alt={title}/>\n        </div>\n    )\n}\n","\nexport const getGifs = async (category) => {\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=wsQ7bU7HRPiNJYGnf5ht5MBb7bQubDIA`;\n        const resp = await fetch(url);\n        const { data } = await resp.json();\n        const gifs = data.map(img => {\n            console.log(img)\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url\n            }\n        });\n        return gifs;\n    }","import React from 'react';\nimport GifGridItem from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\n\nexport const GifGrid = ({ category }) => {\n    const { data: images, loading } = useFetchGifs(category);\n    return (\n        <>\n            <h3> {category}</h3>\n\n            {loading && <p>Cargando</p>}\n            <div className=\"card-grid\">\n                {\n                    images.map(img => (\n                        <GifGridItem\n                            key={img.id}\n                            {...img} />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from './../helpers/getGifs';\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n    useEffect(() => {\n        getGifs(category).then(imgs => {\n            setState({\n                data: imgs,\n                loading: false,\n            });\n        });\n    }, [category]);\n\n    return state;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\nexport const GifExpertApp = () => {\n    const [categories, setCategories] = useState(['One Punch']);\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n\n            <ol>\n                {\n                    categories.map((category, i) => (\n                        <GifGrid\n                            category={category}\n                            key={category} />))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}